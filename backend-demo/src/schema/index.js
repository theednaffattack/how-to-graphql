const { makeExecutableSchema } = require("graphql-tools");
const resolvers = require("./resolvers");

// define our types here
const typeDefs = `
    type Link {
        id: ID!
        url: String!
        description: String!
        postedBy: User
        votes: [Vote!]!
    }

    type Query {
        allLinks(
            filter: LinkFilter,
            skip: Int,
            first: Int
        ): [Link!]!
        allPolls(
            filter: PollFilter,
            skip: Int,
            first: Int
        ): [Poll!]!
        getPoll(id: ID!): Poll
    }

    input LinkFilter {
        OR: [LinkFilter!]
        description_contains: String
        url_contains: String
    }
    
    input PollFilter {
        OR: [PollFilter!]
        voteOptions_contains: String
        title_contains: String
    }

    type Mutation {
        createLink(url: String!, description: String!): Link
        createPoll(title: String!, options: [String!]!, description: String!): Poll
        createVote(voteOption: ID!): Vote
        createVoteOption(pollId: ID!): VoteOption
        createQuestion(text: String!, pollId: ID!): Question
        createVote(linkId: ID!): Vote
        createPollVote(questionId: ID!): PollVote
        # updatePoll(id: ID!, title: String, url: String, votes: Int): Poll  
        # updateOrCreatePoll(update: UpdatePoll!, create: CreatePoll!): Poll

        # Note that this mutation could receive the email and password directly
        # as arguments, with no problem. You're just using this "authProvider"
        # instead to mimic the signature generated by Graphcool, which will
        # make it easier to integrate this server implementation later with the 
        # code from the frontend tutorials.
        createUser(name: String!, authProvider: AuthProviderSignupData!): User
        signinUser(email: AUTH_PROVIDER_EMAIL): SigninPayload!
    }

    type SigninPayload {
        token: String
        user: User
    }

    type User {
        id: ID!
        name: String!
        email: String
        password: String
        roles: [Role!]!
        votes: [Vote!]!
    }

    type Poll {
        id: ID!
        postedBy: User
        title: String!
        options: [String!]!
        voteOptions: [VoteOption!]!
        votes: [Vote!]!
    }

    type Question {
        id: ID!
        poll: Poll!
        text: String!
    }
    
    type PollVote {
        id: ID!
        user: User!
        question: Question!
    }

    type VoteOption {
      id: ID!
      text: String!
      user: User!
      poll: Poll!
      votes: [Vote!]!
      votesCount: Int!
    }

    input AuthProviderSignupData {
        email: AUTH_PROVIDER_EMAIL
    }

    input AUTH_PROVIDER_EMAIL {
        email: String!
        password: String!
    }
    
    type Vote {
        id: ID!
        user: User!
        link: Link!
    }

    type Role {
        id: ID!
        type: String!
        voteOption: VoteOption!
    }

    type Subscription {
        Link(filter: LinkSubscriptionFilter): LinkSubscriptionPayload
        Poll(filter: PollSubscriptionFilter): PollSubscriptionPayload
        Vote(filter: VoteSubscriptionFilter): VoteSubscriptionPayload      
    }

    input LinkSubscriptionFilter {
        mutation_in: [_ModelMutationType!]
    }
    
    input PollSubscriptionFilter {
        mutation_in: [_ModelMutationType!]
    }

    type LinkSubscriptionPayload {
        mutation: _ModelMutationType!
        node: Link
    }
    
    input VoteSubscriptionFilter {
        mutation_in: [_ModelMutationType!]
    }
  
    type VoteSubscriptionPayload {
        mutation: _ModelMutationType!
        node: Vote
    }
    type PollSubscriptionPayload {
        mutation: _ModelMutationType!
        node: Poll
    }

    enum _ModelMutationType {
        CREATED
        UPDATED
        DELETED
    }
`;

// generate the schema object from the types definition
module.exports = makeExecutableSchema({ typeDefs, resolvers });
